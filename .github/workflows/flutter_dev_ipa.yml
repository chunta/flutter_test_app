name: Flutter CI

on:
  push:
    branches: [ "master" ]  # Trigger the workflow on pushes to the main branch
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Trigger the workflow on pull requests to the main branch

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Verify secret existence
        run: |
          echo "Secret is available: ${{ secrets.IOS_DEV_CERTIFICATE }}"
          echo "P12 Password: ${{ secrets.P12_PASSWORD }}"
          echo "ProvisionProfile: ${{ secrets.ICEFUSE_DEV_PROVISION}}"
          echo "[Dev] ExportOptionList: ${{ secrets.DEV_EXPORT_OPTIONLIST}}"

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Flutter (use the latest stable version)
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - run: flutter --version

          # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Analyze the project (ensure Dart code quality)
      - name: Analyze code
        run: flutter analyze

      # Format the code (you can enforce code style on commits)
      # Uncomment this if you want to enforce formatting on each commit
      # - name: Verify code formatting
      #   run: flutter format --set-exit-if-changed .

      # Run tests (make sure to have tests in the test/ directory)
      - name: Run tests
        run: flutter test

       # Install the iOS development certificate (from secret)
      - name: Install iOS certificate
        run: |
          echo ${{ secrets.IOS_DEV_CERTIFICATE }} | base64 --decode > ios_dev_certificate.p12
          security import ios_dev_certificate.p12 -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign

      # Create the dev-export-options.plist from the secret
      - name: Create Export Options Plist
        run: |
          echo "${{ secrets.DEV_EXPORT_OPTIONLIST }}" | base64 --decode > dev-export-options.plist
          cat dev-export-options.plist

      # Install the provisioning profile (from secret)
      - name: Install Provisioning Profile
        run: |
          echo ${{ secrets.ICEFUSE_DEV_PROVISION }} | base64 --decode > provisioning_profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(security cms -D -i provisioning_profile.mobileprovision | plutil -extract UUID xml1 -o - - | grep -o '<string>.*</string>' | sed -e 's/<[^>]*>//g')
          cp provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
      
      # Build the IPA for iOS
      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          # always use --export-options-plist=ios/GithubActionsExportOptions.plist
          build-cmd: flutter build ipa --export-options-plist ./dev-export-options.plist
          certificate-base64: ${{ secrets.IOS_DEV_CERTIFICATE }}
          certificate-password: ${{ secrets.P12_PASSWORD }}
          provisioning-profile-base64: ${{ secrets.ICEFUSE_DEV_PROVISION }}
          keychain-password: ${{ secrets.P12_PASSWORD }}

      - name: Check build folder
        run: ls build/ios/ipa

      - name: Upload IPA
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: app-release.ipa
          path: build/ios/ipa/flutter_test_app.ipa

  release:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download-artiface@4
        uses: actions/download-artifact@v4
        with:
          name: app-release.ipa

      - name: Upload artiface to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_IOS_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: MyTesters
          file: the_flutter.ipa
  
      #- name: Set artifact download URL
      #  id: artifact_url
      #  run: echo "ARTIFACT_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}" >> $GITHUB_ENV

      #- name: Send GitHub Action trigger data to Slack workflow
      #  id: slack
      #  uses: slackapi/slack-github-action@v1.27.0
      #  with:
      #    payload: |
      #      {
      #        "text": "Download the IPA here: ${{ env.ARTIFACT_URL }}"
      #      }
      #  env:
      #    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Build the APK (for Android) or iOS app (uncomment for production CI/CD)
      # - name: Build APK
      #   run: flutter build apk --release

      # - name: Build iOS
      #   run: flutter build ios --no-codesign

      # (Optional) Upload APK or build artifacts as part of the CI/CD process
      # - name: Upload APK
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app-release.apk
      #     path: build/app/outputs/flutter-apk/app-release.apk
