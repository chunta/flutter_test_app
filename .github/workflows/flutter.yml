name: Flutter CI

on:
  push:
    branches: [ "master" ]  # Trigger the workflow on pushes to the main branch
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Trigger the workflow on pull requests to the main branch

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Verify secret existence
        run: |
          echo "Secret is available: ${{ secrets.IOS_DEV_CERTIFICATE }}"
          echo "P12 Password: ${{ secrets.P12_PASSWORD }}"
          echo "ProvisionProfile: ${{ secrets.ICEFUSE_DEV_PROVISION}}"
          echo "[Dev] ExportOptionList: ${{ secrets.DEV_EXPORT_OPTIONLIST}}"

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Flutter (use the latest stable version)
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - run: flutter --version

          # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Analyze the project (ensure Dart code quality)
      - name: Analyze code
        run: flutter analyze

      # Format the code (you can enforce code style on commits)
      # Uncomment this if you want to enforce formatting on each commit
      # - name: Verify code formatting
      #   run: flutter format --set-exit-if-changed .

      # Run tests (make sure to have tests in the test/ directory)
      - name: Run tests
        run: flutter test

       # Install the iOS development certificate (from secret)
      - name: Install iOS certificate
        run: |
          echo ${{ secrets.IOS_DEV_CERTIFICATE }} | base64 --decode > ios_dev_certificate.p12
          security import ios_dev_certificate.p12 -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign

      # Create the dev-export-options.plist from the secret
      - name: Create Export Options Plist
        run: |
          echo "${{ secrets.DEV_EXPORT_OPTIONLIST }}" | base64 --decode > dev-export-options.plist
          cat dev-export-options.plist

     # Build the IPA for iOS
      - name: Build iOS IPA
        run: flutter build ipa --export-options-plist ./dev-export-options.plist

     # Upload IPA as part of the CI/CD process
      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: app-release.ipa
          path: build/ios/ipa/app.ipa

      # Build the APK (for Android) or iOS app (uncomment for production CI/CD)
      # - name: Build APK
      #   run: flutter build apk --release

      # - name: Build iOS
      #   run: flutter build ios --no-codesign

      # (Optional) Upload APK or build artifacts as part of the CI/CD process
      # - name: Upload APK
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app-release.apk
      #     path: build/app/outputs/flutter-apk/app-release.apk
